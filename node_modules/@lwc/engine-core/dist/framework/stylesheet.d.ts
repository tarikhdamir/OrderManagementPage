import { VM } from './vm';
import { Template } from './template';
import { VCustomElement, VNode } from './vnodes';
/**
 * Function producing style based on a host and a shadow selector. This function is invoked by
 * the engine with different values depending on the mode that the component is running on.
 */
export type Stylesheet = (stylesheetToken: string | undefined, useActualHostSelector: boolean, useNativeDirPseudoclass: boolean) => string;
/**
 * The list of stylesheets associated with a template. Each entry is either a `Stylesheet` or
 * an array of stylesheets that a given stylesheet depends on via CSS `@import` declarations.
 */
export type Stylesheets = Array<Stylesheet | Stylesheets>;
export declare function updateStylesheetToken(vm: VM, template: Template, legacy: boolean): void;
export declare function getStylesheetsContent(vm: VM, template: Template): ReadonlyArray<string>;
/**
 * If the component that is currently being rendered uses scoped styles,
 * this returns the unique token for that scoped stylesheet. Otherwise
 * it returns null.
 * @param owner
 * @param legacy
 */
export declare function getScopeTokenClass(owner: VM, legacy: boolean): string | null;
/**
 * This function returns the host style token for a custom element if it
 * exists. Otherwise it returns null.
 *
 * A host style token is applied to the component if scoped styles are used.
 * @param vnode
 */
export declare function getStylesheetTokenHost(vnode: VCustomElement): string | null;
export declare function createStylesheet(vm: VM, stylesheets: ReadonlyArray<string>): VNode[] | null;
export declare function unrenderStylesheet(stylesheet: Stylesheet): void;
