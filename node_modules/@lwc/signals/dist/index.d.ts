export type OnUpdate = () => void;
export type Unsubscribe = () => void;
export interface Signal<T> {
    get value(): T;
    subscribe(onUpdate: OnUpdate): Unsubscribe;
}
export declare abstract class SignalBaseClass<T> implements Signal<T> {
    abstract get value(): T;
    private subscribers;
    subscribe(onUpdate: OnUpdate): () => void;
    protected notify(): void;
}
