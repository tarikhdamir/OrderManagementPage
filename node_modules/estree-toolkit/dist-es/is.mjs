import { definitions } from './definitions.mjs';
import { aliases } from './aliases.mjs';
const matches = (object, toMatch) => {
    for (const key in toMatch) {
        const value = toMatch[key];
        if (typeof value == 'function') {
            if (!value(object[key], object))
                return false;
        }
        else if (value !== object[key]) {
            return false;
        }
    }
    return true;
};
const lowerCase = (str) => str[0].toLowerCase() + str.slice(1);
export const is = {};
for (const nodeType in definitions) {
    is[lowerCase(nodeType)] = (nodeOrNodePath, toMatch) => {
        if (nodeOrNodePath == null)
            return false;
        // We shouldn't believe in micro-benchmarks but it seems that
        // checking for a property is faster than `instanceof` calls
        // for `NodePath`
        const node = nodeOrNodePath.ctx != null
            ? nodeOrNodePath.node
            : nodeOrNodePath;
        return (node != null && node.type === nodeType &&
            (toMatch != null ? matches(node, toMatch) : true));
    };
}
for (const aliasName in aliases) {
    is[lowerCase(aliasName)] = (nodeOrNodePath, toMatch) => {
        if (nodeOrNodePath == null)
            return false;
        const node = nodeOrNodePath.ctx != null
            ? nodeOrNodePath.node
            : nodeOrNodePath;
        return (node != null && (node.type in aliases[aliasName]) &&
            (toMatch != null ? matches(node, toMatch) : true));
    };
}
